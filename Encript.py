import string
import random
import time
import base64
import codecs

encode = False
all_chars = ""
byte_char = 2
chars_leng = 256
encription_level = 1
for i in range(chars_leng):
    all_chars += (chr(i))
new_chars = {}
s = all_chars[:]
random_seed = 1631293801156
seed = int(round(time.time() * 1000)) if random_seed is None else random_seed
random.seed(seed)
for n, char in enumerate(all_chars):
    while (True):
        new_char = ""
        for i in range(byte_char):
            new_char += all_chars[random.randint(0, len(all_chars) - 1)]
        if new_char not in new_chars.values():
            new_chars.update({char: new_char})
            break
# else:
# print("Non sono uscito: ",new_char)
token = ""
for char in s:
    token += new_chars[char]
# print(new_chars)
print("\n\n")
if encode:
    r = ""
    s = "Logan"
    for char in s:
        r += new_chars[char]
    print("R prima: ")
    print(r)
    for i in range(encription_level):
        r = str(str(r).encode("utf-8"))
        r = r[2:len(r) - 1].encode("ascii")
        r = base64.b64encode(r)
    print("R dopo:")
    r = str(r)
    r = r[2:len(r) - 1]
    r = r.encode("utf-16")
    print(r)
    print("\n\n\n")
    print(f"Lunghezza: {len(r)}")
    print(f"Seme generazione: {seed}")
else:
    byte_char = int(len(token) / chars_leng)
    print(byte_char)
    new_chars = {}
    s = b'\xff\xfeT\x00F\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00D\x00g\x00x\x00T\x00F\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00D\x00g\x00x\x00T\x00F\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00D\x00g\x00x\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00V\x00V\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00l\x00l\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00B\x00l\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00V\x001\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00G\x00E\x002\x00d\x00l\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x00x\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00V\x00V\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00l\x00l\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00N\x00u\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00T\x00h\x00p\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00N\x00u\x00X\x00H\x00g\x00x\x00N\x00m\x009\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00M\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00F\x00h\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00W\x00F\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00Z\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x00w\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00D\x00B\x00e\x00S\x00E\x00x\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x004\x00M\x00U\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00m\x00l\x00c\x00e\x00D\x00E\x004\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00D\x00N\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00h\x00N\x00k\x00R\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00Y\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x005\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00Y\x00j\x00l\x00k\x00I\x00k\x00x\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x005\x00Y\x00U\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00l\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x00w\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00D\x00B\x00e\x00S\x00E\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x00w\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00M\x00F\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00k\x00y\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00W\x00F\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00Z\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\xff\xfeX\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00j\x00J\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00h\x00O\x00G\x00d\x00c\x00e\x00D\x00E\x00z\x00U\x001\x00x\x004\x00M\x00D\x00B\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00F\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00G\x00F\x00j\x00R\x00F\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x004\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00Y\x00T\x00F\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x004\x00Z\x00S\x009\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00M\x00F\x00V\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x005\x00Z\x00Q\x00=\x00=\x00\xff\xfeT\x00F\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00D\x00g\x00x\x00T\x00F\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00D\x00g\x00x\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00V\x00V\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00l\x00l\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00B\x00l\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00V\x001\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00G\x00E\x002\x00d\x00l\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x00x\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00V\x00V\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00l\x00l\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00N\x00u\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00T\x00h\x00p\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00m\x00Z\x00+\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00N\x00u\x00X\x00H\x00g\x00x\x00N\x00m\x009\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00M\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00F\x00h\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00T\x00B\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x004\x00M\x00F\x005\x00I\x00Q\x00l\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x002\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00T\x00l\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00h\x00i\x00O\x00S\x00R\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00h\x00i\x00N\x001\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00I\x00z\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00j\x00B\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x004\x00O\x00G\x00J\x00p\x00X\x00H\x00g\x00x\x00O\x00E\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00l\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00E\x00w\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00D\x00B\x00e\x00S\x00E\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00N\x00m\x00l\x00c\x00e\x00D\x00E\x004\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00D\x00h\x00i\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00O\x00T\x00Z\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x005\x00N\x00F\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00g\x00w\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00T\x00J\x00k\x00I\x00k\x00x\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x005\x00Y\x00W\x00Q\x00i\x00a\x00V\x00x\x004\x00M\x00T\x00h\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00g\x004\x00O\x00G\x00J\x00c\x00e\x00G\x00M\x00y\x00X\x00H\x00g\x004\x00M\x00F\x00x\x004\x00Y\x00z\x00J\x00c\x00e\x00D\x00k\x00y\x00e\x002\x00R\x00C\x00X\x00H\x00h\x00j\x00M\x00l\x00x\x004\x00O\x00D\x00Z\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00h\x00Y\x00V\x00x\x004\x00Y\x00z\x00N\x00c\x00e\x00G\x00J\x00l\x00X\x00H\x00h\x00j\x00M\x001\x00x\x004\x00Y\x00W\x00F\x00c\x00e\x00G\x00M\x00z\x00X\x00H\x00h\x00i\x00Z\x00Q\x00=\x00=\x00'
    s = s.decode("utf-16")
    s = s.encode('raw_unicode_escape')
    s, _ = codecs.escape_decode(s, 'hex')
    print(s)
    for i in range(encription_level):
        s = base64.b64decode(s)
        s = s.decode("ascii")
        s = s.encode('raw_unicode_escape')
        s, _ = codecs.escape_decode(s, 'hex')
        s = s.decode("utf-8")
    for n, char in enumerate(all_chars):
        new_chars.update({token[byte_char * n:byte_char * n + byte_char]: char})
    re = ""
    for n in range(int(len(s) / byte_char)):
        re += new_chars[s[byte_char * n:byte_char * n + byte_char]]
    print(re)
    print("\n\n\n")
    print(f"Lunghezza: {len(re)}")
    print(f"Seme generazione: {seed}")
    pass
